{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react'; //共享状态的 useState 方法 rect hooks\n\nexport default function useStats(url) {\n  // console.log(url);\n  // from input 双向绑定新写法 \n  var _useState = useState(),\n      stats = _useState[0],\n      setStats = _useState[1]; // 加载 ajax loading\n\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(),\n      error = _useState3[0],\n      setError = _useState3[1]; // 封装 state 的处理\n  // useEffect 相当于生命周期函数\n\n\n  useEffect(function () {\n    // console.log('mounted')\n    function fetchData() {\n      var data;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetch(url).then(function (res) {\n                return res.json();\n              })[\"catch\"](function (err) {\n                setError(err);\n              }));\n\n            case 3:\n              data = _context.sent;\n              console.log(data);\n              setLoading(false);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchData();\n  }, [url]);\n  return {\n    stats: stats,\n    loading: loading,\n    error: error\n  };\n}","map":{"version":3,"sources":["E:/Coding-Dream/React/rona/utils/useStats.js"],"names":["useState","useEffect","useStats","url","stats","setStats","loading","setLoading","error","setError","fetchData","fetch","then","res","json","err","data","console","log"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAA4C;;AAE5C,eAAe,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACpC;AACA;AAFoC,kBAGVH,QAAQ,EAHE;AAAA,MAG7BI,KAH6B;AAAA,MAGtBC,QAHsB,iBAIpC;;;AAJoC,mBAKNL,QAAQ,CAAC,IAAD,CALF;AAAA,MAK7BM,OAL6B;AAAA,MAKpBC,UALoB;;AAAA,mBAMVP,QAAQ,EANE;AAAA,MAM7BQ,KAN6B;AAAA,MAMtBC,QANsB,kBAOpC;AACA;;;AACAR,EAAAA,SAAS,CAAC,YAAM;AACd;AACA,aAAeS,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACEH,cAAAA,UAAU,CAAC,IAAD,CAAV;AADF;AAAA,+CAEqBI,KAAK,CAACR,GAAD,CAAL,CAChBS,IADgB,CACX,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,eADQ,WAEV,UAAAC,GAAG,EAAI;AACZN,gBAAAA,QAAQ,CAACM,GAAD,CAAR;AACD,eAJgB,CAFrB;;AAAA;AAEQC,cAAAA,IAFR;AAOEC,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAT,cAAAA,UAAU,CAAC,KAAD,CAAV;;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUAG,IAAAA,SAAS;AACV,GAbQ,EAaN,CAACP,GAAD,CAbM,CAAT;AAcA,SAAO;AACLC,IAAAA,KAAK,EAALA,KADK;AAELE,IAAAA,OAAO,EAAPA,OAFK;AAGLE,IAAAA,KAAK,EAALA;AAHK,GAAP;AAKD","sourcesContent":["import { useState, useEffect } from 'react' //共享状态的 useState 方法 rect hooks\r\n\r\nexport default function useStats(url) {\r\n  // console.log(url);\r\n  // from input 双向绑定新写法 \r\n  const [stats, setStats] = useState()\r\n  // 加载 ajax loading\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState()\r\n  // 封装 state 的处理\r\n  // useEffect 相当于生命周期函数\r\n  useEffect(() => {\r\n    // console.log('mounted')\r\n    async function fetchData() {\r\n      setLoading(true)\r\n      const data = await fetch(url)\r\n        .then(res => res.json())\r\n        .catch(err => {\r\n          setError(err)\r\n        })\r\n      console.log(data)\r\n      setLoading(false)\r\n    }\r\n    fetchData()\r\n  }, [url])\r\n  return {\r\n    stats,\r\n    loading,\r\n    error\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}